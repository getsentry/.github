name: Validate new issue - test
on:
  workflow_dispatch:
env:
  GITHUB_TOKEN: ${{ secrets.PAT }}
jobs:
  validate-new-issue-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "It skips validation for Sentry org members."
      run: |
        set -euo pipefail

        issue_number=$(
          basename $(
            gh issue create --title "Greetings, program!" --body "This is an issue, clearly."
          )
        )
        echo "Checking issue #${issue_number}."

        function download-logs {
          echo "Downloading and extracting the log for the validation workflow run."
          rm -rf log.zip log
          run_id=$(
            gh api "repos/:owner/:repo/actions/workflows/validate-new-issue.yml/runs" \
              | jq '.workflow_runs[0].id'
          )
          if [ -z "$run_id" ]; then
            echo "No run_id."
            return 1
          fi
          gh api "repos/:owner/:repo/actions/runs/${run_id}/logs" > log.zip
          if [ $? -gt 0 ]; then
            echo "Bad log.zip?"
            return 1
          fi
          logfile="validate-new-issue/3_Validate issue against templates.txt"
          unzip log.zip "$logfile"
          mv "$logfile" log
          rm -rf validate-new-issue
          rm log.zip
          echo "Are we looking at the right issue?"
          expected="${issue_number}"
          actual=$(grep 'Validating issue #[0-9]*\.[^"]' log | sed -Ee 's/.*#([0-9]*)\..*/\1/')
          echo "Expected: ${expected}"
          echo "Actual:   ${actual}"
          test $actual = $expected
        }

        function backoff {
          echo "Trying $1 several times with backoff ..."
          for i in {0..6}; do
            [ $i -gt 0 ] && sleep $(( 2 ** $i ))
            echo "::group::Trying $1 ..."
            $1 && echo "::endgroup::" && return
            echo "::endgroup::"
          done
          echo "$1 backed right off the edge! ðŸ˜§"
          exit 1
        }

        backoff download-logs
        echo "Logs downloaded successfully, proceeding to test."

        grep "Skipping validation" log > /dev/null
