name: Validate new issue - test
on:
  workflow_dispatch:
env:
  GITHUB_TOKEN: ${{ secrets.PAT }}
jobs:
  case_1:
    name: "It skips validation for Sentry org members."
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: test
        run: |
          issue_number=$(
            basename $(
              gh issue create --title "Greetings, program!" --body "This is an issue, clearly."
            )
          )
          .github/workflows/test-helpers/get-issue-validation-log "${issue_number}"
          set -x
          grep "Skipping validation" log
  case_2:
    name: "It runs non-member issues through validation."
    needs: case_1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: setup
        name: setup
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_NONMEMBER }}
        run: |
          issue_number=$(
            basename $(
              gh issue create --title "Greetings, program!" \
                --body "
          ### Environment

          foo

          ### Steps to Reproduce

          bar

          ### Expected Result

          buz

          ### Actual Result

          blah
          "
            )
          )
          echo "::set-output name=issue_number::${issue_number}"
      - name: test
        run: |
          issue_number="${{ steps.setup.outputs.issue_number }}"
          .github/workflows/test-helpers/get-issue-validation-log "${issue_number}"
          set -x
          grep "sentry-test-fixture-nonmember is not a member of the getsentry org." log
          grep "BUG_REPORT.md? Match! üëç üíÉ" log
  case_3:
    name: "It is flexible about header order and extra headers."
    needs: case_2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: setup
        name: setup
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_NONMEMBER }}
        run: |
          issue_number=$(
            basename $(
              gh issue create --title "Greetings, program!" \
                --body "
          ### Preamble
          ### Steps to Reproduce
          ### Expected Result
          ### Actual Result
          ### Environment
          ### Postamble
          "
            )
          )
          echo "::set-output name=issue_number::${issue_number}"
      - name: test
        run: |
          issue_number="${{ steps.setup.outputs.issue_number }}"
          .github/workflows/test-helpers/get-issue-validation-log "${issue_number}"
          set -x
          grep "BUG_REPORT.md? Match! üëç üíÉ" log
  case_4:
    name: "It closes invalid issues with a comment."
    needs: case_3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: setup
        name: setup
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_NONMEMBER }}
        run: |
          issue_number=$(
            basename $(
              gh issue create --title "Greetings, program!" \
                --body "I don't follow directions."
            )
          )
          echo "::set-output name=issue_number::${issue_number}"
      - name: test
        run: |
          issue_number="${{ steps.setup.outputs.issue_number }}"
          .github/workflows/test-helpers/get-issue-validation-log "${issue_number}"
          set -x
          grep 'BUG_REPORT.md? No match. üëé' log
          grep 'FEATURE_REQUEST.md? No headers in template. ü§∑' log
          grep 'Commented: https://github.com/${{ github.repository }}' log
          grep "Closed with: .* does not properly use" log
  case_5:
    name: "It considers exact matches to be invalid."
    needs: case_4
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: setup
        name: setup
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_NONMEMBER }}
        run: |
          issue_number=$(
            basename $(
              gh issue create --title "Greetings, program!" \
                --body "$(sed '1{/^---$/!q;};1,/^---$/d' '.github/ISSUE_TEMPLATE/BUG_REPORT.md')"
            )
          )
          echo "::set-output name=issue_number::${issue_number}"
      - name: test
        run: |
          issue_number="${{ steps.setup.outputs.issue_number }}"
          .github/workflows/test-helpers/get-issue-validation-log "${issue_number}"
          set -x
          grep "BUG_REPORT.md? Match! üëç üíÉ" log
          grep "... like, an /exact/ match. üòñ" log
          grep "Closed with: .* without filling in anything" log
  case_6:
    name: "It doesn't care about CRLF line endings."
    needs: case_5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: setup
        name: setup
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_NONMEMBER }}
        run: |
          issue_number=$(
            basename $(
              gh issue create --title "Greetings, program!" \
                --body "$(sed '1{/^---$/!q;};1,/^---$/d;s/$/\r/' '.github/ISSUE_TEMPLATE/BUG_REPORT.md')"
            )
          )
          echo "::set-output name=issue_number::${issue_number}"
      - name: test
        run: |
          issue_number="${{ steps.setup.outputs.issue_number }}"
          .github/workflows/test-helpers/get-issue-validation-log "${issue_number}"
          set -x
          grep "Closed with: .* without filling in anything" log
  case_7:
    name: "It considers empty issues to be invalid."
    needs: case_6
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: setup
        name: setup
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_NONMEMBER }}
        run: |
          issue_number=$(
            basename $(
              gh issue create --title "Greetings, program!" \
                --body "        "
            )
          )
          echo "::set-output name=issue_number::${issue_number}"
      - name: test
        run: |
          issue_number="${{ steps.setup.outputs.issue_number }}"
          .github/workflows/test-helpers/get-issue-validation-log "${issue_number}"
          set -x
          grep "Closed with: .* created an empty issue" log
